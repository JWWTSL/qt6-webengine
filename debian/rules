#!/usr/bin/make -f

include /usr/share/dpkg/architecture.mk

export DEB_BUILD_MAINT_OPTIONS = hardening=+all optimize=+lto

export DH_VERBOSE = 1

ifeq (riscv64, $(DEB_HOST_ARCH))
        export DEB_BUILD_MAINT_OPTIONS = hardening=+all optimize=-lto
        USE_CC = clang-17
        USE_CXX = clang++-17
else
        export DEB_BUILD_MAINT_OPTIONS = hardening=+all optimize=-lto
        USE_CC = gcc
        USE_CXX = g++
endif

export DH_VERBOSE = 1

export NINJAJOBS = -j1
export NINJAFLAGS = -j1

export LDFLAGS += -Wl,--no-keep-memory,--reduce-memory-overheads
export CFLAGS += -g1
export CXXFLAGS += -g1

%:
	dh $@ --with pkgkde_symbolshelper --buildsystem=cmake+ninja

touch_files = src/3rdparty/chromium/third_party/devtools-frontend/src/front_end/third_party/lighthouse/lighthouse-dt-bundle.js \
	      src/3rdparty/chromium/third_party/devtools-frontend/src/front_end/third_party/lighthouse/report-assets/report-generator.js

override_dh_auto_clean:
	dh_auto_clean

	rm -f $(CURDIR)/src/3rdparty/chromium/third_party/jstemplate/jstemplate_compiled.js
	for fname in $(touch_files); do \
		rm -f $(CURDIR)/$${fname}; \
	done

override_dh_auto_configure:
	# all files need to exist before configure is run for unity build
	# Create js files, that are needed for building step for arch and indep builds
	cd $(CURDIR)/src/3rdparty/chromium/third_party/jstemplate/; \
	cat util.js jsevalcontext.js jstemplate.js exports.js > jstemplate_compiled.js

	# jQuery
	cp /usr/share/javascript/jquery/jquery.min.js examples/webenginewidgets/contentmanipulation/
	cp /usr/share/javascript/jquery/jquery.min.js src/3rdparty/chromium/third_party/pycoverage/coverage/htmlfiles/
	cp /usr/share/javascript/jquery-tablesorter/jquery.tablesorter.min.js src/3rdparty/chromium/third_party/pycoverage/coverage/htmlfiles/

	set -ex; for fname in $(touch_files); do \
		mkdir -p $(CURDIR)/$$(dirname $${fname}); \
		touch $(CURDIR)/$${fname}; \
	done

	dh_auto_configure -- \
                -DCMAKE_MESSAGE_LOG_LEVEL=STATUS \
                -DCMAKE_LIBRARY_PATH=$(DEB_HOST_MULTIARCH) \
                -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF \
                -DFEATURE_pdf_v8=OFF \
                -DFEATURE_pdf_xfa=OFF \
                -DFEATURE_pdf_xfa_bmp=OFF \
                -DFEATURE_pdf_xfa_gif=OFF \
                -DFEATURE_pdf_xfa_png=OFF \
                -DFEATURE_pdf_xfa_tiff=OFF \
                -DFEATURE_qtpdf_build=ON \
                -DFEATURE_qtpdf_v8=OFF \
                -DFEATURE_qtpdf_quick_build=ON \
                -DFEATURE_qtpdf_widgets_build=ON \
                -DFEATURE_qtwebengine_quick_build=ON \
                -DFEATURE_qtwebengine_widgets_build=ON \
                -DFEATURE_webengine_kerberos=ON \
                -DFEATURE_webengine_proprietary_codecs=ON \
                -DFEATURE_webengine_system_icu=ON \
                -DFEATURE_webengine_system_libevent=ON \
                -DFEATURE_webengine_system_libjpeg=ON \
                -DFEATURE_webengine_system_libpng=ON \
                -DFEATURE_webengine_system_zlib=ON \
                -DFEATURE_webengine_webrtc=OFF \
                -DFEATURE_webengine_webrtc_pipewire=OFF \
                -DQT_UNITY_BUILD=OFF

override_dh_auto_build:
	dh_auto_build
	dh_auto_build -- docs

execute_after_dh_auto_install:
	# Reproducible builds: remove build paths from .prl files
	sed -i -e '/^QMAKE_PRL_BUILD_DIR/d' debian/tmp/usr/lib/$(DEB_HOST_MULTIARCH)/libQt6*.prl
	# Install documentation.
	DESTDIR=$(CURDIR)/debian/tmp dh_auto_build -- install_docs
	# Remove build path from index files.
	find $(CURDIR)/debian/tmp/usr/share/qt6/doc -type f -name *.index -exec \
               sed -i 's@$(CURDIR)/@@g' {} \;

override_dh_dwz:
